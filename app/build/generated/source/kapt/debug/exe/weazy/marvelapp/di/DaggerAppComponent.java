// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package exe.weazy.marvelapp.di;

import dagger.MembersInjector;
import dagger.internal.Preconditions;
import exe.weazy.marvelapp.db.AppDatabase;
import exe.weazy.marvelapp.repository.MarvelRepository;
import exe.weazy.marvelapp.repository.MarvelRepository_MembersInjector;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<String> providePublicApiKeyProvider;

  private Provider<String> providePrivateApiKeyProvider;

  private Provider<AppDatabase> provideDatabaseProvider;

  private MembersInjector<MarvelRepository> marvelRepositoryMembersInjector;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideRetrofitProvider =
        NetworkModule_ProvideRetrofitFactory.create(builder.networkModule);

    this.providePublicApiKeyProvider =
        NetworkModule_ProvidePublicApiKeyFactory.create(builder.networkModule);

    this.providePrivateApiKeyProvider =
        NetworkModule_ProvidePrivateApiKeyFactory.create(builder.networkModule);

    this.provideDatabaseProvider =
        DatabaseModule_ProvideDatabaseFactory.create(builder.databaseModule);

    this.marvelRepositoryMembersInjector =
        MarvelRepository_MembersInjector.create(
            provideRetrofitProvider,
            providePublicApiKeyProvider,
            providePrivateApiKeyProvider,
            provideDatabaseProvider);
  }

  @Override
  public void inject(MarvelRepository marvelRepository) {
    marvelRepositoryMembersInjector.injectMembers(marvelRepository);
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private DatabaseModule databaseModule;

    private Builder() {}

    public AppComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (databaseModule == null) {
        throw new IllegalStateException(DatabaseModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }
  }
}
